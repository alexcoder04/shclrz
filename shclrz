#!/bin/sh
# used resources:
# https://en.wikipedia.org/wiki/ANSI_escape_code

VERSION="0.1.0"
DIALOG_FILE="${TMPDIR:-/tmp}/shclrz-dialog-select"

export RESETER="\033[0m"
export SOURCE_FILE="/dev/stdin"

die(){
  echo "Error: $1" >"/dev/stderr"
  exit 1
}

print_version(){
  cat >>"/dev/stdout" <<EOF
shclrz - colorizing output in the shell
v$VERSION
EOF
  exit 0
}

cleanup(){
  rm "$DIALOG_FILE"
}

print_help(){
  cat >>"/dev/stdout" <<EOF
Description: colorizing output in the shell

Usage: shclrz [ -h | --help ]
              [ -v | --version ]
              [ -g | --generate ]
              [ -s | --source-file  SOURCE_FILE ]
              [ -b | --background   COLOR ]
              [ -f | --foreground   COLOR ]
              [ -F | --formatting   OPTION ]

Note:
  -g option provides an interactive menu,
  -f and -b read text from stdin or a file

  not all formatting options are supported by all terminals

List of colors:
  black         blue
  red           magenta
  green         cyan
  yellow        white

Formatting options:
  bold          dim
  italic        underline

EOF
  exit 0
}

generate_sequence(){
  dialog \
    --radiolist "Background" 20 60 8 \
    n default on \
    0 black off \
    1 red off \
    2 green off \
    3 yellow off \
    4 blue off \
    5 magenta off \
    6 cyan off \
    7 white off \
    2>"$DIALOG_FILE"
  export BACKGROUND_COLOR="$(cat "$DIALOG_FILE")"
  [ "$BACKGROUND_COLOR" = n ] && export BACKGROUND_COLOR=""

  dialog \
    --radiolist "Foreground" 20 60 8 \
    n default on \
    0 black off \
    1 red off \
    2 green off \
    3 yellow off \
    4 blue off \
    5 magenta off \
    6 cyan off \
    7 white off \
    2>"$DIALOG_FILE"
  export FOREGROUND_COLOR="$(cat "$DIALOG_FILE")"
  [ "$FOREGROUND_COLOR" = n ] && export FOREGROUND_COLOR=""

  dialog \
    --radiolist "Formatting" 20 60 5 \
    0 none on \
    1 bold off \
    2 dim off \
    3 italic off \
    4 underline off \
    2>"$DIALOG_FILE"
  export FORMATTING="$(cat "$DIALOG_FILE")"

  dialog \
    --inputbox "Enter your text" 10 60 \
    2>"$DIALOG_FILE"

  if [ ! -z "$FORMATTING" ]; then
    pre="$FORMATTING"
  fi
  if [ ! -z "$FOREGROUND_COLOR" ]; then
    [ -z "$pre" ] \
      && pre="3$FOREGROUND_COLOR" \
      || pre="$pre;3$FOREGROUND_COLOR"
  fi
  if [ ! -z "$BACKGROUND_COLOR" ]; then
    [ -z "$pre" ] \
      && pre="4$BACKGROUND_COLOR" \
      || pre="$pre;4$BACKGROUND_COLOR"
  fi
  [ -z "$pre" ] && pre="0"
  echo
  echo "Use this string:"
  echo "\\e[${pre}m$(cat "$DIALOG_FILE")\\e[0m"
  cleanup
  exit 0
}

get_color(){
  case "$1" in
    black)      echo -n "0" ;;
    red)        echo -n "1" ;;
    green)      echo -n "2" ;;
    yellow)     echo -n "3" ;;
    blue)       echo -n "4" ;;
    magenta)    echo -n "5" ;;
    cyan)       echo -n "6" ;;
    white)      echo -n "7" ;;
    *) die "invalid color" ;;
  esac
}

get_formatting(){
  case "$1" in
    bold)       echo -n "1" ;;
    dim)        echo -n "2" ;;
    italic)     echo -n "3" ;;
    underline)  echo -n "4" ;;
    *) die "invalid formatting" ;;
  esac
}

print_formatted(){
  if [ ! -z "$FORMATTING" ]; then
    prefix="$FORMATTING"
  fi
  if [ ! -z "$FOREGROUND_COLOR" ]; then
    [ -z "$prefix" ] \
      && prefix="3$FOREGROUND_COLOR" \
      || prefix="$prefix;3$FOREGROUND_COLOR"
  fi
  if [ ! -z "$BACKGROUND_COLOR" ]; then
    [ -z "$prefix" ] \
      && prefix="4$BACKGROUND_COLOR" \
      || prefix="$prefix;4$BACKGROUND_COLOR"
  fi
  [ -z "$prefix" ] && prefix="0"
  echo -n "\033[${prefix}m"
  cat "$SOURCE_FILE"
  echo -n "$RESETER"
}

PARSED_ARGS="$(getopt -a -n shclrz -o "hvgb:f:s:F:" --long "help,version,generate,background:,foreground:,source-file:,formatting" -- "$@")"
VALID_ARGS=$?
[ "$VALID_ARGS" = 0 ] || print_help
eval set -- "$PARSED_ARGS"

while :
do
  case "$1" in
    -h | --help )
      print_help; shift ;;
    -v | --version )
      print_version; shift ;;
    -g | --generate )
      generate_sequence; shift ;;
    -b | --background )
      export BACKGROUND_COLOR="$(get_color "$2")" ; shift 2 ;;
    -f | --foreground )
      export FOREGROUND_COLOR="$(get_color "$2")" ; shift 2 ;;
    -F | --formatting )
      export FORMATTING="$(get_formatting "$2")" ; shift 2 ;;
    -s | --source-file )
      export SOURCE_FILE="$2" ; shift 2 ;;
    --)
      shift; break ;;
    *)
      die "invalid arguments passed" ;;
  esac
done

print_formatted

